const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/exceljs.min-BG1mft68.js","assets/vendor-Csw2ODfV.js"])))=>i.map(i=>d[i]);
import{_ as p}from"./index-DCndX48W.js";import{l as u,f as b}from"./utils-D8kRLn_f.js";import"./ui-CeF3mqTb.js";import"./router-x15TIwzH.js";import"./vendor-Csw2ODfV.js";import"./icons-Dv2osvF6.js";class A{constructor(){this.ExcelJS=null,this.workbook=null}async initialize(){if(!this.ExcelJS){const e=await p(()=>import("./exceljs.min-BG1mft68.js").then(l=>l.e),__vite__mapDeps([0,1]));this.ExcelJS=e.default,this.workbook=new this.ExcelJS.Workbook,this.setupWorkbookProperties()}}setupWorkbookProperties(){this.workbook.creator="MyDiary Pro Analytics",this.workbook.lastModifiedBy="MyDiary Wellness Intelligence Engine",this.workbook.created=new Date,this.workbook.modified=new Date,this.workbook.lastPrinted=new Date,this.workbook.calcProperties.fullCalcOnLoad=!0,this.workbook.views=[{x:0,y:0,width:25e3,height:18e3,firstSheet:0,activeTab:0,visibility:"visible"}]}get colors(){return{primary:"FF059669",secondary:"FF0891B2",accent:"FFDC2626",wellness:"FF10B981",habit:"FF8B5CF6",journal:"FF06B6D4",mood:"FFF59E0B",energy:"FFEF4444",sleep:"FF6366F1",light:"FFF0FDF4",medium:"FF9CA3AF",dark:"FF064E3B",white:"FFFFFFFF",black:"FF000000"}}get styles(){return{mainTitle:{font:{name:"Segoe UI",size:28,bold:!0,color:{argb:this.colors.dark}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.light}}},sectionTitle:{font:{name:"Segoe UI",size:18,bold:!0,color:{argb:this.colors.primary}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:"FFF0FDF4"}}},wellnessHeader:{font:{name:"Segoe UI",size:12,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.wellness}},border:{top:{style:"medium",color:{argb:this.colors.dark}},left:{style:"medium",color:{argb:this.colors.dark}},bottom:{style:"medium",color:{argb:this.colors.dark}},right:{style:"medium",color:{argb:this.colors.dark}}}},habitHeader:{font:{name:"Segoe UI",size:12,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.habit}},border:{top:{style:"medium",color:{argb:this.colors.dark}},left:{style:"medium",color:{argb:this.colors.dark}},bottom:{style:"medium",color:{argb:this.colors.dark}},right:{style:"medium",color:{argb:this.colors.dark}}}},journalHeader:{font:{name:"Segoe UI",size:12,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.journal}},border:{top:{style:"medium",color:{argb:this.colors.dark}},left:{style:"medium",color:{argb:this.colors.dark}},bottom:{style:"medium",color:{argb:this.colors.dark}},right:{style:"medium",color:{argb:this.colors.dark}}}},data:{font:{name:"Segoe UI",size:11},alignment:{horizontal:"left",vertical:"middle",wrapText:!0},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},dataCenter:{font:{name:"Segoe UI",size:11},alignment:{horizontal:"center",vertical:"middle"},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},dataDate:{font:{name:"Segoe UI",size:11},alignment:{horizontal:"center",vertical:"middle"},numFmt:"dd/mm/yyyy",border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},scoreExcellent:{font:{name:"Segoe UI",size:11,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.wellness}},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},scoreGood:{font:{name:"Segoe UI",size:11,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.secondary}},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},scoreAverage:{font:{name:"Segoe UI",size:11,bold:!0,color:{argb:this.colors.dark}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.mood}},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},scorePoor:{font:{name:"Segoe UI",size:11,bold:!0,color:{argb:this.colors.white}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.accent}},border:{top:{style:"thin",color:{argb:this.colors.medium}},left:{style:"thin",color:{argb:this.colors.medium}},bottom:{style:"thin",color:{argb:this.colors.medium}},right:{style:"thin",color:{argb:this.colors.medium}}}},insight:{font:{name:"Segoe UI",size:11,italic:!0,color:{argb:this.colors.primary}},alignment:{horizontal:"left",vertical:"middle",wrapText:!0},fill:{type:"pattern",pattern:"solid",fgColor:{argb:"FFECFDF5"}}}}}async createDiaryExport(e={}){await this.initialize();const{dailyEntries:l=[],weeklyEntries:t=[],monthlyEntries:o=[],wellnessData:s=[],habits:r=[],habitCompletions:a={}}=e;return await this.createWellnessDashboard(s,r,a,l),await this.createHabitAnalytics(r,a),await this.createJournalInsights(l,t,o),await this.createMoodPatterns(s),await this.createLifestyleAnalysis(s,r,a),await this.createWellnessForecasts(s,r),await this.createProgressTracker(r,a,s),await this.createRawDiaryData(l,t,o,s,r,a),this.workbook}async createWellnessDashboard(e,l,t,o){const s=this.workbook.addWorksheet("🌟 Wellness Dashboard",{pageSetup:{paperSize:9,orientation:"landscape",fitToPage:!0}});s.views=[{showGridLines:!1}];let r=1;s.mergeCells(`A${r}:O${r+1}`);const a=s.getCell(`A${r}`);a.value="MYDIARY PRO - WELLNESS & LIFE ANALYTICS DASHBOARD",a.style=this.styles.mainTitle,s.getRow(r).height=40,r+=3;const i=this.calculateAverageMood(e),n=this.calculateAverageEnergy(e),g=this.calculateAverageSleep(e),d=this.calculateLongestHabitStreak(l,t),c=this.calculateJournalStreak(o);this.createWellnessKPI(s,"A",r,"Avg Mood",i,"0.0",this.colors.mood),this.createWellnessKPI(s,"D",r,"Avg Energy",n,"0.0",this.colors.energy),this.createWellnessKPI(s,"G",r,"Avg Sleep Hours",g,"0.0",this.colors.sleep),this.createWellnessKPI(s,"J",r,"Best Habit Streak",d,"0",this.colors.habit),this.createWellnessKPI(s,"M",r,"Journal Streak",c,"0",this.colors.journal),r+=5,r=await this.createWellnessTrendsSection(s,e,r),r+=2,r=await this.createHabitPerformanceSection(s,l,t,r),r+=2,r=await this.createLifeBalanceSection(s,e,r),r+=2,await this.createWellnessInsights(s,e,l,t,r),s.columns.forEach(h=>{h.width=Math.min(Math.max(h.width||10,12),30)})}createWellnessKPI(e,l,t,o,s,r,a){const i=e.getCell(`${l}${t}`);i.value=o,i.style={font:{name:"Segoe UI",size:10,bold:!0,color:{argb:this.colors.dark}},alignment:{horizontal:"center",vertical:"middle"},fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.light}}};const n=e.getCell(`${l}${t+1}`);n.value=s,n.style={font:{name:"Segoe UI",size:18,bold:!0,color:{argb:a}},alignment:{horizontal:"center",vertical:"middle"},numFmt:r,fill:{type:"pattern",pattern:"solid",fgColor:{argb:this.colors.white}},border:{top:{style:"medium",color:{argb:a}},left:{style:"medium",color:{argb:a}},bottom:{style:"medium",color:{argb:a}},right:{style:"medium",color:{argb:a}}}};const g=String.fromCharCode(l.charCodeAt(0)+2);e.mergeCells(`${l}${t}:${g}${t}`),e.mergeCells(`${l}${t+1}:${g}${t+1}`),e.getRow(t).height=22,e.getRow(t+1).height=35}calculateAverageMood(e){if(!e.length)return 0;const l=e.filter(t=>t.mood&&t.mood>0).map(t=>t.mood);return l.length>0?l.reduce((t,o)=>t+o,0)/l.length:0}calculateAverageEnergy(e){if(!e.length)return 0;const l=e.filter(t=>t.energy&&t.energy>0).map(t=>t.energy);return l.length>0?l.reduce((t,o)=>t+o,0)/l.length:0}calculateAverageSleep(e){if(!e.length)return 0;const l=e.filter(t=>t.sleep&&t.sleep>0).map(t=>t.sleep);return l.length>0?l.reduce((t,o)=>t+o,0)/l.length:0}calculateLongestHabitStreak(e,l){let t=0;return e.forEach(o=>{let s=0,r=0;const a=Object.keys(l).filter(i=>l[i].includes(o.id)).sort();for(let i=0;i<a.length;i++)i===0||u(new Date(a[i]),new Date(a[i-1]))===1?s++:s=1,r=Math.max(r,s);t=Math.max(t,r)}),t}calculateJournalStreak(e){if(!e.length)return 0;const l=e.sort((s,r)=>new Date(r.date)-new Date(s.date));let t=0,o=new Date;for(const s of l){const r=new Date(s.date);if(u(o,r)===t)t++,o=r;else break}return t}async createWellnessTrendsSection(e,l,t){e.mergeCells(`A${t}:O${t}`);const o=e.getCell(`A${t}`);o.value="📈 WELLNESS TRENDS & PATTERNS (Last 30 Days)",o.style=this.styles.sectionTitle,t+=2,["Date","Mood Score","Energy Level","Sleep Hours","Stress Level","Wellness Score","Weekly Avg","Trend"].forEach((a,i)=>{const n=e.getCell(t,i+1);n.value=a,n.style=this.styles.wellnessHeader}),t++;const r=[...l].sort((a,i)=>new Date(a.date)-new Date(i.date));return r.forEach((a,i)=>{const n=this.calculateDailyWellnessScore(a),g=this.calculateWeeklyAverage(r,i),d=this.getTrendIndicator(r,i),c=e.getRow(t);c.getCell(1).value=new Date(a.date),c.getCell(1).style=this.styles.dataDate,c.getCell(2).value=a.mood||0,c.getCell(2).style=this.getScoreStyle(a.mood||0),c.getCell(3).value=a.energy||0,c.getCell(3).style=this.getScoreStyle(a.energy||0),c.getCell(4).value=a.sleep||0,c.getCell(4).style={...this.styles.dataCenter,numFmt:"0.0"},c.getCell(5).value=a.stress||0,c.getCell(5).style=this.getScoreStyle(a.stress||0,!0),c.getCell(6).value=n,c.getCell(6).style={...this.getScoreStyle(n),numFmt:"0.0"},c.getCell(7).value=g,c.getCell(7).style={...this.styles.dataCenter,numFmt:"0.0"},c.getCell(8).value=d,c.getCell(8).style={...this.styles.dataCenter,font:{...this.styles.dataCenter.font,color:{argb:d.includes("↗")?this.colors.wellness:d.includes("↘")?this.colors.accent:this.colors.medium}}},t++}),t}calculateDailyWellnessScore(e){const l=e.mood||0,t=e.energy||0,o=Math.min(e.sleep||0,10),s=e.stress||0;return l*.3+t*.3+Math.min(o/8*10,10)*.2+(10-s)*.2}getScoreStyle(e,l=!1){const t=l?10-e:e;return t>=8?this.styles.scoreExcellent:t>=6?this.styles.scoreGood:t>=4?this.styles.scoreAverage:this.styles.scorePoor}calculateWeeklyAverage(e,l){const t=Math.max(0,l-6),o=e.slice(t,l+1);return o.length===0?0:o.reduce((r,a)=>r+this.calculateDailyWellnessScore(a),0)/o.length}getTrendIndicator(e,l){if(l<7)return"—";const t=this.calculateWeeklyAverage(e,l),o=this.calculateWeeklyAverage(e,l-7),s=t-o;return s>.5?"↗ Improving":s<-.5?"↘ Declining":"→ Stable"}async createHabitPerformanceSection(e,l,t,o){e.mergeCells(`A${o}:O${o}`);const s=e.getCell(`A${o}`);return s.value="🎯 HABIT TRACKING PERFORMANCE ANALYSIS",s.style=this.styles.sectionTitle,o+=2,["Habit Name","Total Days","Completion Rate","Current Streak","Best Streak","Weekly Average","Performance"].forEach((a,i)=>{const n=e.getCell(o,i+1);n.value=a,n.style=this.styles.habitHeader}),o++,l.forEach(a=>{const i=this.calculateHabitStats(a,t),n=e.getRow(o);n.getCell(1).value=a.name,n.getCell(1).style=this.styles.data,n.getCell(2).value=i.totalDays,n.getCell(2).style=this.styles.dataCenter,n.getCell(3).value=i.completionRate/100,n.getCell(3).style={...this.styles.dataCenter,numFmt:"0.0%"},n.getCell(4).value=i.currentStreak,n.getCell(4).style=this.styles.dataCenter,n.getCell(5).value=i.bestStreak,n.getCell(5).style=this.styles.dataCenter,n.getCell(6).value=i.weeklyAverage/100,n.getCell(6).style={...this.styles.dataCenter,numFmt:"0.0%"},n.getCell(7).value=i.performance,n.getCell(7).style={...this.styles.dataCenter,font:{...this.styles.dataCenter.font,color:{argb:this.getPerformanceColor(i.performance)}}},o++}),o}calculateHabitStats(e,l){const t=e.id,o=Object.keys(l).filter(h=>l[h].includes(t)).sort(),s=Math.max(o.length,1),r=o.length/s*100;let a=0,i=0,n=0;b(new Date,"yyyy-MM-dd");for(let h=0;h<30;h++){const y=b(new Date(Date.now()-h*24*60*60*1e3),"yyyy-MM-dd");if(o.includes(y))(h===0||a>0)&&a++;else break}for(let h=0;h<o.length;h++)h===0||u(new Date(o[h]),new Date(o[h-1]))===1?(n++,i=Math.max(i,n)):n=1;let g=0;for(let h=0;h<4;h++){let y=0;for(let m=0;m<7;m++){const f=b(new Date(Date.now()-(h*7+m)*24*60*60*1e3),"yyyy-MM-dd");o.includes(f)&&y++}g+=y}const d=g/4/7*100;let c="Needs Work";return r>=90?c="Excellent":r>=75?c="Great":r>=60?c="Good":r>=40&&(c="Fair"),{totalDays:s,completionRate:r,currentStreak:a,bestStreak:i,weeklyAverage:d,performance:c}}getPerformanceColor(e){switch(e){case"Excellent":return this.colors.wellness;case"Great":return this.colors.secondary;case"Good":return this.colors.mood;case"Fair":return this.colors.energy;default:return this.colors.accent}}async createHabitAnalytics(e,l){this.workbook.addWorksheet("🎯 Habit Deep Dive")}async createJournalInsights(e,l,t){this.workbook.addWorksheet("📝 Journal Analysis")}async createMoodPatterns(e){this.workbook.addWorksheet("😊 Mood Patterns")}async createLifestyleAnalysis(e,l,t){this.workbook.addWorksheet("🏃‍♀️ Lifestyle Analysis")}async createWellnessForecasts(e,l){this.workbook.addWorksheet("🔮 Wellness Forecasts")}async createProgressTracker(e,l,t){this.workbook.addWorksheet("📊 Progress Tracker")}async createLifeBalanceSection(e,l,t){return t+5}async createWellnessInsights(e,l,t,o,s){e.mergeCells(`A${s}:O${s}`);const r=e.getCell(`A${s}`);return r.value="🧠 AI-POWERED WELLNESS INSIGHTS & RECOMMENDATIONS",r.style=this.styles.sectionTitle,s+=2,this.generateWellnessInsights(l,t,o).forEach(i=>{e.mergeCells(`A${s}:O${s}`);const n=e.getCell(`A${s}`);n.value=i,n.style=this.styles.insight,e.getRow(s).height=30,s++}),s}generateWellnessInsights(e,l,t){const o=[],s=this.calculateAverageMood(e);s>=8?o.push("🌟 Excellent! Your mood has been consistently high. You're experiencing great emotional well-being. Keep up the positive lifestyle choices!"):s<5&&o.push("💙 Your mood patterns suggest you might benefit from stress management techniques or speaking with a wellness professional.");const r=this.calculateAverageEnergy(e),a=this.calculateAverageSleep(e);r<5&&a<7&&o.push("😴 Low energy levels correlate with insufficient sleep. Aim for 7-9 hours of sleep to boost your energy naturally.");const i=this.findBestPerformingHabit(l,t);i&&o.push(`🏆 Your "${i.name}" habit is performing excellently! This consistency is building positive life changes.`);const n=this.findStrugglingHabit(l,t);n&&o.push(`💪 Consider breaking down "${n.name}" into smaller, more manageable steps to improve consistency.`);const g=this.analyzeWeeklyPatterns(e);return g&&o.push(g),o.length>0?o:["📊 Keep tracking your wellness data to unlock personalized insights and recommendations for your journey."]}findBestPerformingHabit(e,l){let t=null,o=0;return e.forEach(s=>{const r=this.calculateHabitStats(s,l);r.completionRate>o&&(o=r.completionRate,t=s)}),o>75?t:null}findStrugglingHabit(e,l){let t=null,o=100;return e.forEach(s=>{const r=this.calculateHabitStats(s,l);r.completionRate<o&&(o=r.completionRate,t=s)}),o<50?t:null}analyzeWeeklyPatterns(e){const l={0:[],1:[],2:[],3:[],4:[],5:[],6:[]};e.forEach(a=>{const i=new Date(a.date).getDay(),n=this.calculateDailyWellnessScore(a);l[i].push(n)});const t=Object.keys(l).map(a=>({day:parseInt(a),avg:l[a].length>0?l[a].reduce((i,n)=>i+n,0)/l[a].length:0})),o=t.reduce((a,i)=>i.avg>a.avg?i:a),s=t.reduce((a,i)=>i.avg<a.avg?i:a),r=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];return o.avg-s.avg>1?`📅 Your wellness peaks on ${r[o.day]}s and dips on ${r[s.day]}s. Consider what makes ${r[o.day]}s special and apply those elements to other days.`:null}async createRawDiaryData(e,l,t,o,s,r){const a=this.workbook.addWorksheet("📋 Raw Diary Data");let i=1;if(e.length>0){a.mergeCells(`A${i}:J${i}`);const n=a.getCell(`A${i}`);n.value="DAILY JOURNAL ENTRIES",n.style=this.styles.sectionTitle,i+=2;const g=Object.keys(e[0]);g.forEach((d,c)=>{const h=a.getCell(i,c+1);h.value=d.toUpperCase(),h.style=this.styles.journalHeader}),i++,e.forEach(d=>{g.forEach((c,h)=>{const y=a.getCell(i,h+1);y.value=d[c],c.includes("date")?y.style=this.styles.dataDate:y.style=this.styles.data}),i++}),i+=2}}async getBuffer(){return await this.workbook.xlsx.writeBuffer()}async saveToFile(e){await this.workbook.xlsx.writeFile(e)}}export{A as default};
