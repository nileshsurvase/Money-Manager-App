import{V as S,x as y}from"./index-DCndX48W.js";import{f as r,d as w}from"./utils-D8kRLn_f.js";const o={TASKS:"coreos_tasks",HABITS:"coreos_habits",FITNESS:"coreos_fitness",MENTAL_HEALTH:"coreos_mental_health",STREAKS:"coreos_streaks"},l=(s,t=[])=>{try{const e=localStorage.getItem(s);return e?JSON.parse(e):t}catch(e){return console.error(`Error reading from storage (${s}):`,e),t}},g=(s,t)=>{try{return localStorage.setItem(s,JSON.stringify(t)),!0}catch(e){return console.error(`Error saving to storage (${s}):`,e),S.error("Failed to save data locally"),!1}},D=(s,t=null,e="medium",n="general")=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),title:y(s),timeBlock:t?y(t):null,priority:["low","medium","high"].includes(e)?e:"medium",category:y(n),completed:!1,completedAt:null,createdAt:new Date().toISOString(),date:r(new Date,"yyyy-MM-dd"),estimatedDuration:30,actualDuration:null,notes:""}),I=(s,t,e,n,a="daily")=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),name:y(s),cue:y(t),routine:y(e),reward:y(n),frequency:["daily","weekly","monthly"].includes(a)?a:"daily",streak:0,longestStreak:0,completions:[],createdAt:new Date().toISOString(),isActive:!0,category:"personal",difficulty:"medium",timeOfDay:"morning"}),L=()=>{const s=l(o.TASKS,[]),t=r(new Date,"yyyy-MM-dd");return s.filter(e=>e.date===t)},O=(s,t=null,e="medium",n="general")=>{const a=l(o.TASKS,[]),d=D(s,t,e,n);return a.push(d),g(o.TASKS,a)?(S.success("Task added successfully!"),d):null},_=s=>{const t=l(o.TASKS,[]),e=t.findIndex(n=>n.id===s);return e!==-1&&(t[e].completed=!0,t[e].completedAt=new Date().toISOString(),g(o.TASKS,t))?(m("tasks"),S.success("Task completed! 🎉"),t[e]):null},x=()=>{const s=l(o.HABITS,[]),t=r(new Date,"yyyy-MM-dd");return s.filter(e=>e.isActive).map(e=>({...e,completed:e.completions.some(n=>r(new Date(n),"yyyy-MM-dd")===t)}))},B=(s,t,e,n,a="daily")=>{const d=l(o.HABITS,[]),i=I(s,t,e,n,a);return d.push(i),g(o.HABITS,d)?(S.success("Habit added successfully!"),i):null},v=s=>{const t=l(o.HABITS,[]),e=t.findIndex(n=>n.id===s);if(e!==-1){const n=new Date().toISOString(),a=r(new Date,"yyyy-MM-dd");if(t[e].completions.some(i=>r(new Date(i),"yyyy-MM-dd")===a))S.info("Habit already completed today!");else if(t[e].completions.push(n),t[e].streak=A(t[e].completions),t[e].longestStreak=Math.max(t[e].longestStreak,t[e].streak),g(o.HABITS,t))return m("habits"),S.success(`Habit completed! 🔥 ${t[e].streak} day streak!`),t[e]}return null},A=s=>{if(s.length===0)return 0;const t=s.map(a=>r(new Date(a),"yyyy-MM-dd")).sort().reverse();let e=0,n=new Date;for(let a=0;a<t.length;a++){const d=r(w(n,a),"yyyy-MM-dd");if(t[a]===d)e++;else break}return e},H=(s,t=[],e=0)=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),type:y(s),exercises:t.map(n=>({name:y(n.name),sets:n.sets||1,reps:n.reps||0,weight:n.weight||0,duration:n.duration||0,distance:n.distance||0,notes:y(n.notes||"")})),duration:e,caloriesBurned:0,date:new Date().toISOString(),mood:"good",difficulty:"medium",location:"gym"}),b=(s,t,e=0,n=0,a=0)=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),name:y(s),calories:parseFloat(t)||0,macros:{protein:parseFloat(e)||0,carbs:parseFloat(n)||0,fat:parseFloat(a)||0},date:new Date().toISOString(),mealType:"other",ingredients:[],notes:""}),W=()=>{const s=l(o.FITNESS,{workouts:[],meals:[],bodyMetrics:[],goals:{dailyCalories:2e3,dailyProtein:150,weeklyWorkouts:4}}),t=r(new Date,"yyyy-MM-dd"),e=s.workouts.filter(c=>r(new Date(c.date),"yyyy-MM-dd")===t),n=s.meals.filter(c=>r(new Date(c.date),"yyyy-MM-dd")===t),a=n.reduce((c,M)=>c+M.calories,0),d=n.reduce((c,M)=>c+M.macros.protein,0),i=Math.min(100,Math.round((e.length>0?50:0)+(a>0?a/s.goals.dailyCalories*50:0)));return{workouts:e,meals:n,workoutsToday:e.length,totalCalories:a,totalProtein:d,dailyScore:i,goals:s.goals}},G=(s,t,e)=>{const n=l(o.FITNESS,{workouts:[],meals:[],bodyMetrics:[],goals:{dailyCalories:2e3,dailyProtein:150,weeklyWorkouts:4}}),a=H(s,t,e);return n.workouts.push(a),g(o.FITNESS,n)?(m("fitness"),S.success("Workout logged! 💪"),a):null},P=(s,t,e,n,a)=>{const d=l(o.FITNESS,{workouts:[],meals:[],bodyMetrics:[],goals:{dailyCalories:2e3,dailyProtein:150,weeklyWorkouts:4}}),i=b(s,t,e,n,a);return d.meals.push(i),g(o.FITNESS,d)?(S.success("Meal logged! 🍎"),i):null},E=(s,t,e,n="")=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),mood:s,stress:t,energy:e,emotions:[],stressors:[],gratitude:[],notes:y(n),date:new Date().toISOString(),activities:[]}),C=(s,t,e="")=>({id:Date.now().toString()+Math.random().toString(36).substr(2,9),type:y(s),duration:parseFloat(t)||0,technique:"",effectiveness:5,notes:y(e),date:new Date().toISOString()}),R=()=>{const s=l(o.MENTAL_HEALTH,{checkIns:[],meditations:[],goals:{dailyMeditation:10,weeklyCheckIns:7}}),t=r(new Date,"yyyy-MM-dd"),e=s.checkIns.find(i=>r(new Date(i.date),"yyyy-MM-dd")===t),n=s.meditations.filter(i=>r(new Date(i.date),"yyyy-MM-dd")===t),a=n.reduce((i,c)=>i+c.duration,0),d=Math.min(100,Math.round((e?40:0)+(a>0?a/s.goals.dailyMeditation*60:0)));return{checkIn:e,meditations:n,totalMeditationTime:a,dailyScore:d,mood:e?F(e.mood):null,goals:s.goals}},F=s=>s>=8?"Excellent":s>=6?"Good":s>=4?"Okay":s>=2?"Poor":"Very Poor",U=(s,t,e,n="")=>{const a=l(o.MENTAL_HEALTH,{checkIns:[],meditations:[],goals:{dailyMeditation:10,weeklyCheckIns:7}}),d=r(new Date,"yyyy-MM-dd"),i=a.checkIns.findIndex(M=>r(new Date(M.date),"yyyy-MM-dd")===d),c=E(s,t,e,n);return i!==-1?(a.checkIns[i]=c,S.success("Mental health check-in updated! 🧠")):(a.checkIns.push(c),m("mental"),S.success("Mental health check-in completed! 🧠")),g(o.MENTAL_HEALTH,a)?c:null},$=(s,t,e="")=>{const n=l(o.MENTAL_HEALTH,{checkIns:[],meditations:[],goals:{dailyMeditation:10,weeklyCheckIns:7}}),a=C(s,t,e);return n.meditations.push(a),g(o.MENTAL_HEALTH,n)?(S.success(`Meditation session completed! 🧘‍♀️ ${t} minutes`),a):null},m=s=>{const t=l(o.STREAKS,{}),e=r(new Date,"yyyy-MM-dd");if(t[s]||(t[s]={current:0,longest:0,lastUpdate:null,history:[]}),t[s].lastUpdate===e)return t[s].current;const n=r(w(new Date,1),"yyyy-MM-dd");return t[s].lastUpdate===n?t[s].current+=1:t[s].current=1,t[s].longest=Math.max(t[s].longest,t[s].current),t[s].lastUpdate=e,t[s].history.push({date:e,streak:t[s].current}),g(o.STREAKS,t),t[s].current},q=s=>l(o.STREAKS,{})[s]?.current||0,J=(s,t)=>{const e=l(o.TASKS,[]),n=e.findIndex(a=>a.id===s);return n!==-1&&(e[n].linkedGoal=t,g(o.TASKS,e))?(S.success("Task linked to goal successfully!"),e[n]):null},V=(s,t)=>{const e=l(o.HABITS,[]),n=e.findIndex(a=>a.id===s);return n!==-1&&(e[n].linkedGoal=t,g(o.HABITS,e))?(S.success("Habit linked to goal successfully!"),e[n]):null},j=()=>{const s=l(o.TASKS,[]),t=l(o.HABITS,[]),e=l(o.FITNESS,[]),n=l(o.MENTAL_HEALTH,[]),a=[],d=new Date;for(let i=6;i>=0;i--){const c=new Date(d);c.setDate(c.getDate()-i);const M=r(c,"yyyy-MM-dd"),h=s.filter(u=>u.date===M),f=t.filter(u=>u.completions.some(k=>r(new Date(k),"yyyy-MM-dd")===M)),T=e.filter(u=>r(new Date(u.date),"yyyy-MM-dd")===M),p=n.filter(u=>r(new Date(u.date),"yyyy-MM-dd")===M);a.push({date:r(c,"MMM dd"),tasks:h.length,completedTasks:h.filter(u=>u.completed).length,habits:f.length,fitness:T.length,mental:p.length,fitnessScore:T.reduce((u,k)=>u+(k.score||0),0)/(T.length||1),mentalScore:p.reduce((u,k)=>u+(k.score||0),0)/(p.length||1)})}return a},z=()=>{const s=l(o.TASKS,[]),t=l(o.HABITS,[]),e=[],n=new Date;for(let a=29;a>=0;a--){const d=new Date(n);d.setDate(d.getDate()-a);const i=r(d,"yyyy-MM-dd"),c=s.filter(h=>h.date===i),M=t.filter(h=>h.completions.some(f=>r(new Date(f),"yyyy-MM-dd")===i));e.push({date:r(d,"MMM dd"),tasks:c.length,completedTasks:c.filter(h=>h.completed).length,habits:M.length,productivity:c.length>0?c.filter(h=>h.completed).length/c.length*100:0})}return e};export{x as a,W as b,R as c,q as d,_ as e,v as f,L as g,O as h,B as i,G as j,P as k,$ as l,U as m,j as n,z as o,J as p,V as q};
